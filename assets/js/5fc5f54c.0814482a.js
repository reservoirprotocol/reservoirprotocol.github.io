"use strict";(self.webpackChunkreservoir_docs=self.webpackChunkreservoir_docs||[]).push([[991],{3905:function(e,t,r){r.d(t,{Zo:function(){return p},kt:function(){return f}});var o=r(7294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,o)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,o,n=function(e,t){if(null==e)return{};var r,o,n={},a=Object.keys(e);for(o=0;o<a.length;o++)r=a[o],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)r=a[o],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var s=o.createContext({}),c=function(e){var t=o.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},p=function(e){var t=c(e.components);return o.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},u=o.forwardRef((function(e,t){var r=e.components,n=e.mdxType,a=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=c(r),f=n,h=u["".concat(s,".").concat(f)]||u[f]||d[f]||a;return r?o.createElement(h,i(i({ref:t},p),{},{components:r})):o.createElement(h,i({ref:t},p))}));function f(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var a=r.length,i=new Array(a);i[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:n,i[1]=l;for(var c=2;c<a;c++)i[c]=r[c];return o.createElement.apply(null,i)}return o.createElement.apply(null,r)}u.displayName="MDXCreateElement"},3908:function(e,t,r){r.r(t),r.d(t,{frontMatter:function(){return l},contentTitle:function(){return s},metadata:function(){return c},toc:function(){return p},default:function(){return u}});var o=r(7462),n=r(3366),a=(r(7294),r(3905)),i=["components"],l={sidebar_label:"Data Lake",sidebar_position:2},s="Reservoir Data Lake",c={unversionedId:"protocol/data-lake",id:"protocol/data-lake",title:"Reservoir Data Lake",description:"The Reservoir Data Lake is an open and permissionless data repository built on top of Arweave. It is designed to bring off-chain liquidity on-chain, so that it's publicly available for anyone to leverage. This is critical for building composable protocols and applications that aren't dependent on a single centralized gatekeeper.",source:"@site/docs/protocol/data-lake.md",sourceDirName:"protocol",slug:"/protocol/data-lake",permalink:"/docs/protocol/data-lake",editUrl:"https://github.com/facebook/docusaurus/edit/main/website/docs/protocol/data-lake.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_label:"Data Lake",sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Core Components",permalink:"/docs/protocol/core-components"},next:{title:"Order Book",permalink:"/docs/protocol/order-book"}},p=[],d={toc:p};function u(e){var t=e.components,r=(0,n.Z)(e,i);return(0,a.kt)("wrapper",(0,o.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"reservoir-data-lake"},"Reservoir Data Lake"),(0,a.kt)("p",null,"The Reservoir Data Lake is an open and permissionless data repository built on top of Arweave. It is designed to bring off-chain liquidity on-chain, so that it's publicly available for anyone to leverage. This is critical for building composable protocols and applications that aren't dependent on a single centralized gatekeeper."),(0,a.kt)("p",null,"Similar to data lakes used in analytics, Reservoir's Data Lake is purely focused on storing raw order data, without actually checking if they are valid. This is partly to keep costs as low as possible, and partly because validity checking requires understanding the state of the parent blockchain, to know who owns which tokens. This validation is performed at a higher level, by an Indexer node, which can reconstruct the state of the Order Book from the raw data on each chain."),(0,a.kt)("p",null,"The Data Lake is a light-weight protocol on top of Arweave, with transaction that are published with the following tags:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"App-Name: Reservoir Protocol\nApp-Version: 0.0.1\nNetwork: mainnet / rinkeby\n")),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://viewblock.io/arweave/tx/DomOJe5Efye10uJudxLQMubQPQtyFJTTxLoNO0ttjIw"},"Example Transaction")),(0,a.kt)("p",null,"The data is an array of objects, each with a kind:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'{\n    "kind":"string",\n    "data":"object"\n}\n')),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://b2ey4jpoir7spnos4jxhoewqgltnapiloikjju6exigtws3nrsga.arweave.net/DomOJe5Efye10uJudxLQMubQPQtyFJTTxLoNO0ttjIw"},"Example Blob")),(0,a.kt)("p",null,"The system is designed to be extensible, with new kinds added over time. This can either be new exchanges, with their own order formats, or any other data that might be relevant. For example, mutable NFT metadata like collection descriptions or royalties could be stored in Reservoir's Data Lake, instead of needing to be configured on each NFT marketplace."))}u.isMDXComponent=!0}}]);